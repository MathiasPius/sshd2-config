[directives.AcceptEnv]
  comment = [
    "Specifies what environment variables sent by the client will be copied into the session's environ(7). See SendEnv and SetEnv in ssh_config(5) for how to configure the client. The TERM environment variable is always accepted whenever the client requests a pseudo-terminal as it is required by the protocol. Variables are specified by name, which may contain the wildcard characters ‘*’ and ‘?’. Multiple environment variables may be separated by whitespace or spread across multiple AcceptEnv directives. Be warned that some environment variables could be used to bypass restricted user environments. For this reason, care should be taken in the use of this directive. The default is not to accept any environment variables.",
  ]
  values = { space_separated = "wildcard" }

[directives.AddressFamily]
  comment = [
    "Specifies which address family should be used by sshd(8). Valid arguments are any (the default), inet (use IPv4 only), or inet6 (use IPv6 only).",
  ]
  values = { typed = ["any", "inet", "inet6"] }

[directives.AllowAgentForwarding]
  comment = [
    "Specifies whether ssh-agent(1) forwarding is permitted. The default is yes. Note that disabling agent forwarding does not improve security unless users are also denied shell access, as they can always install their own forwarders.",
  ]
  values = { typed = ["yes", "no"] }

[directives.AllowGroups]
  comment = [
    "This keyword can be followed by a list of group name patterns, separated by spaces. If specified, login is allowed only for users whose primary group or supplementary group list matches one of the patterns. Only group names are valid; a numerical group ID is not recognized. By default, login is allowed for all groups. The allow/deny groups directives are processed in the following order: DenyGroups, AllowGroups.",
  ]
  values = { space_separated = "wildcard" }

[directives.AllowStreamLocalForwarding]
  comment = [
    "Specifies whether StreamLocal (Unix-domain socket) forwarding is permitted. The available options are yes (the default) or all to allow StreamLocal forwarding, no to prevent all StreamLocal forwarding, local to allow local (from the perspective of ssh(1)) forwarding only or remote to allow remote forwarding only. Note that disabling StreamLocal forwarding does not improve security unless users are also denied shell access, as they can always install their own forwarders.",
  ]
  values = { typed = ["yes", "no", "all", "local", "remote"] }

[directives.AllowTcpForwarding]
  comment = [
    "Specifies whether TCP forwarding is permitted. The available options are yes (the default) or all to allow TCP forwarding, no to prevent all TCP forwarding, local to allow local (from the perspective of ssh(1)) forwarding only or remote to allow remote forwarding only. Note that disabling TCP forwarding does not improve security unless users are also denied shell access, as they can always install their own forwarders.",
  ]
  values = { typed = ["yes", "no", "all", "local", "remote"] }

[directives.AllowUsers]
  comment = [
    "This keyword can be followed by a list of user name patterns, separated by spaces. If specified, login is allowed only for user names that match one of the patterns. Only user names are valid; a numerical user ID is not recognized. By default, login is allowed for all users. If the pattern takes the form USER@HOST then USER and HOST are separately checked, restricting logins to particular users from particular hosts. HOST criteria may additionally contain addresses to match in CIDR address/masklen format. The allow/deny users directives are processed in the following order: DenyUsers, AllowUsers.",
  ]
  values = { space_separated = "wildcard" }

[directives.AuthenticationMethods]
  comment = [
    "Specifies the authentication methods that must be successfully completed for a user to be granted access. This option must be followed by one or more lists of comma-separated authentication method names, or by the single string any to indicate the default behaviour of accepting any single authentication method. If the default is overridden, then successful authentication requires completion of every method in at least one of these lists.",
    "For example, 'publickey,password publickey,keyboard-interactive' would require the user to complete public key authentication, followed by either password or keyboard interactive authentication. Only methods that are next in one or more lists are offered at each stage, so for this example it would not be possible to attempt password or keyboard-interactive authentication before public key.",
    "For keyboard interactive authentication it is also possible to restrict authentication to a specific device by appending a colon followed by the device identifier bsdauth, pam, or skey, depending on the server configuration. For example, 'keyboard-interactive:bsdauth' would restrict keyboard interactive authentication to the bsdauth device.",
    "If the publickey method is listed more than once, sshd(8) verifies that keys that have been used successfully are not reused for subsequent authentications. For example, 'publickey,publickey' requires successful authentication using two different public keys.",
    "Note that each authentication method listed should also be explicitly enabled in the configuration.",
    "The available authentication methods are: 'gssapi-with-mic', 'hostbased', 'keyboard-interactive', 'none' (used for access to password-less accounts when PermitEmptyPasswords is enabled), 'password' and 'publickey'.",
  ]
  values = { space_separated = { comma_separated = { typed = [
    { value = "any", comment = "Allow authentication by any method." },
    { value = "pubkey", comment = "Public Key Authentication" },
    { value = "challenge-response", comment = "Challenge Response" },
    { value = "password", comment = "Password Authentication" },
    { value = "keyboard-interactive:bsdauth", comment = "Keyboard Interactive via bsdauth device" },
    { value = "keyboard-interactive:skey", comment = "Keyboard Interactive via skey device" },
    { value = "keyboard-interactive:pam", comment = "Keyboard Interactive via PAM device" },
    { value = "keyboard-interactive", comment = "Keyboard Interactive" },
    { value = "gssapi-with-mic" },
    { value = "hostbased"},
    { value = "none"}
  ] } } }

[directives.AuthorizedKeysCommand]
  comment = ["Specifies a program to be used to look up the user's public keys. The program must be owned by root, not writable by group or others and specified by an absolute path. Arguments to AuthorizedKeysCommand accept the tokens described in the TOKENS section. If no arguments are specified then the username of the target user is used.",
  "The program should produce on standard output zero or more lines of authorized_keys output (see AUTHORIZED_KEYS in sshd(8)). AuthorizedKeysCommand is tried after the usual AuthorizedKeysFile files and will not be executed if a matching key is found there. By default, no AuthorizedKeysCommand is run."
  ]
  values = "wildcard"


[directives.Ciphers]
  comment = [
    "Specifies the ciphers allowed.  Multiple ciphers must be",
    "comma-separated.  If the specified list begins with a ‘+’",
    "character, then the specified ciphers will be appended to",
    "the default set instead of replacing them.  If the",
    "specified list begins with a ‘-’ character, then the",
    "specified ciphers (including wildcards) will be removed",
    "from the default set instead of replacing them.  If the",
    "specified list begins with a ‘^’ character, then the",
    "specified ciphers will be placed at the head of the default",
    "set.",
  ]

  values = { modifier = { comma_separated = { typed = [
    "3des-cbc",
    "aes128-cbc",
    "aes192-cbc",
    "aes256-cbc",
    "aes128-ctr",
    "aes192-ctr",
    "aes256-ctr",
    "aes128-gcm@openssh.com",
    "aes256-gcm@openssh.com",
    "chacha20-poly1305@openssh.com",
  ] } } }

[directives.KexAlgorithms]
  comment = [
    "Specifies the available KEX (Key Exchange) algorithms.",
    "Multiple algorithms must be comma-separated.  Alternately",
    "if the specified list begins with a ‘+’ character, then the",
    "specified methods will be appended to the default set",
    "instead of replacing them.  If the specified list begins",
    "with a ‘-’ character, then the specified methods (including",
    "wildcards) will be removed from the default set instead of",
    "replacing them.  If the specified list begins with a ‘^’",
    "character, then the specified methods will be placed at the",
    "head of the default set.",
  ]
  values = { modifier = { comma_separated = { typed = [
    "curve25519-sha256",
    "curve25519-sha256@libssh.org",
    "diffie-hellman-group1-sha1",
    "diffie-hellman-group14-sha12",
    "diffie-hellman-group14-sha256",
    "diffie-hellman-group16-sha512",
    "diffie-hellman-group18-sha512",
    "diffie-hellman-group-exchange-sha1",
    "diffie-hellman-group-exchange-sha256",
    "ecdh-sha2-nistp256",
    "ecdh-sha2-nistp384",
    "ecdh-sha2-nistp521",
    "sntrup761x25519-sha512@openssh.com",
  ] } } }
